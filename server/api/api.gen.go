// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for HintReadType.
const (
	HintReadTypeFeedback HintReadType = "feedback"

	HintReadTypeProposal HintReadType = "proposal"
)

// Defines values for HintWriteType.
const (
	HintWriteTypeFeedback HintWriteType = "feedback"

	HintWriteTypeProposal HintWriteType = "proposal"
)

// Author defines model for Author.
type Author struct {
	AvatarUrl  string `json:"avatar_url"`
	Name       string `json:"name"`
	ProfileUrl string `json:"profile_url"`
}

// HintRead defines model for HintRead.
type HintRead struct {
	Author    Author       `json:"author"`
	Body      string       `json:"body"`
	Comments  float32      `json:"comments"`
	CreatedAt time.Time    `json:"created_at"`
	Id        float32      `json:"id"`
	Reactions float32      `json:"reactions"`
	Title     string       `json:"title"`
	Type      HintReadType `json:"type"`
}

// HintReadType defines model for HintRead.Type.
type HintReadType string

// HintWrite defines model for HintWrite.
type HintWrite struct {
	Body  string        `json:"body"`
	Title string        `json:"title"`
	Type  HintWriteType `json:"type"`
}

// HintWriteType defines model for HintWrite.Type.
type HintWriteType string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Code string `json:"code"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	User *User `json:"user,omitempty"`
}

// User defines model for User.
type User struct {
	Avatar string `json:"avatar"`
	Name   string `json:"name"`
	Token  string `json:"token"`
}

// GetAllHintsParams defines parameters for GetAllHints.
type GetAllHintsParams struct {
	// Filter hints by type
	Type *GetAllHintsParamsType `json:"type,omitempty"`
}

// GetAllHintsParamsType defines parameters for GetAllHints.
type GetAllHintsParamsType string

// CreateHintJSONBody defines parameters for CreateHint.
type CreateHintJSONBody HintWrite

// UpdateHintByIdJSONBody defines parameters for UpdateHintById.
type UpdateHintByIdJSONBody HintWrite

// LoginWithProviderJSONBody defines parameters for LoginWithProvider.
type LoginWithProviderJSONBody LoginRequest

// LoginWithProviderParamsProvider defines parameters for LoginWithProvider.
type LoginWithProviderParamsProvider string

// CreateHintJSONRequestBody defines body for CreateHint for application/json ContentType.
type CreateHintJSONRequestBody CreateHintJSONBody

// UpdateHintByIdJSONRequestBody defines body for UpdateHintById for application/json ContentType.
type UpdateHintByIdJSONRequestBody UpdateHintByIdJSONBody

// LoginWithProviderJSONRequestBody defines body for LoginWithProvider for application/json ContentType.
type LoginWithProviderJSONRequestBody LoginWithProviderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all hints
	// (GET /v1/hint)
	GetAllHints(ctx echo.Context, params GetAllHintsParams) error
	// Create a new hint
	// (POST /v1/hint)
	CreateHint(ctx echo.Context) error
	// Get a hint by id
	// (GET /v1/hint/{id})
	GetHintById(ctx echo.Context, id int) error
	// Update a hint by id
	// (PUT /v1/hint/{id})
	UpdateHintById(ctx echo.Context, id string) error
	// Login with a provider
	// (POST /v1/login/auth/{provider})
	LoginWithProvider(ctx echo.Context, provider LoginWithProviderParamsProvider) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllHints converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllHints(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllHintsParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllHints(ctx, params)
	return err
}

// CreateHint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateHint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateHint(ctx)
	return err
}

// GetHintById converts echo context to params.
func (w *ServerInterfaceWrapper) GetHintById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHintById(ctx, id)
	return err
}

// UpdateHintById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateHintById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateHintById(ctx, id)
	return err
}

// LoginWithProvider converts echo context to params.
func (w *ServerInterfaceWrapper) LoginWithProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider LoginWithProviderParamsProvider

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider", runtime.ParamLocationPath, ctx.Param("provider"), &provider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginWithProvider(ctx, provider)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/hint", wrapper.GetAllHints)
	router.POST(baseURL+"/v1/hint", wrapper.CreateHint)
	router.GET(baseURL+"/v1/hint/:id", wrapper.GetHintById)
	router.PUT(baseURL+"/v1/hint/:id", wrapper.UpdateHintById)
	router.POST(baseURL+"/v1/login/auth/:provider", wrapper.LoginWithProvider)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/bNhD+K8Rtj6rlbi+FnpYMSJOh2IKuQR4Co6Cls8RWIhXy5MIw9N+HIyVbiukE",
	"HboCBfYUWnc88r77vuNlD7lpWqNRk4NsDy6vsJF+edFRZSyvWmtatKTQf5dbSdJ+7GzNv2jXImTgyCpd",
	"Qp+Alg1GDa01G1XjmY19AhYfO2WxgOwhREmmZ80DrJIxgFl/wpz4gGul6T3KInLlQyo/W9xABj+lx7TT",
	"Ied0SLhPYG2KXTSH3DTNCNVg1F2zRr8rtygJi4+S2LwxtuEVFJLwFSmfz0lAVURDWZQ5KaPjB5GiOo5x",
	"+LAH1F3DMDIMxklGb4NYrGX+eQLdGexVAeMZAxTDjlmK00tOgEmgUpqGig24nyvWvVWEp9U6i/5/nHcs",
	"5djV35lS6ff42KGj09vnpsCX+e29ngnuWqNdBJvO4Ys8vmOfvo8Evxt2xwT9dWIm8xn1V8oYxm2nefcJ",
	"OMw7q2j3N2cxEAGlRcuyPP66GmX1x/0HSKBAl1vVMg0hg0vvIsIpSWhmfEzYetRfRdRCz6cqvTGhappk",
	"7suJjVQ1ZFCaWupSy9bU6reSPy5y08AICrz1dvGnd4AEfF/zoV2WpqWiqlvzjnQaiLGb3/lDpZxQTlCF",
	"4uL2RmyM9etZeHE1sFhIXYjbgd3C7Rxhc1Drkzud2XRxewMJbNG6cIHl4vViyfcyLWrZKsjg18Vy8Zo7",
	"rqTKVyLdvk5Z17wu0f+ZZ/EWSci6FuzETYD5Jdl2UwTrRV1fD7ZWWtkgoXWQPTwNdKVqQhviiPVODI1H",
	"se2xQ7s7FmAwBdr/C/WvmKtBaD7JX5bLkQoYUpVtW6vc55F+ckYfX8iXNHh4izzL5imybUZ5D8OU7A8r",
	"vpzrmkbaXQRdkiVj51strPhtNS5SlN99txZSaPzi954UJnhcB5MNLe1yaL/fDIfQ5vt5byDbYf/DFCCG",
	"5JMi9MlBJeleFf3zUvFBmN/+sT1RC9/wcndTvKQW9gshvEBYr0d9+O9zxKdqGeSgNGHpH4wfTA9zCE8l",
	"0UWwv2uLUMdn4A8+37EC84b0vwbPFD1eu7gKa56iUh4/031rzVYVaL0i443SD13ii6JKSDH6nxDDe90r",
	"qm6PHs9yY/QTwxgUYcjksPM8Gd+1MFNAAqUxZY1n37RvT6HZyPudWTSfiCNUCtWzR48pa86VduSNZwoT",
	"x1PRbuOVfGdyHre8fTbqZWlas60yjrI3yzc8SEVoUHT+P6VYBD8sTibEV+PIstjUu0WB25RnMi7scOWn",
	"4f8aSeqEXJuODlPCQDGvjH7V/xMAAP//N9BNiusPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
